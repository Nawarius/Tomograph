[{"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\index.js":"1","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\App.js":"2","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\reportWebVitals.js":"3","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\SceneContainer.jsx":"4","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\ScenePresent.jsx":"5","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\helpers\\createDefaultGUIText.js":"6","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\helpers\\loadMesh.js":"7","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\helpers\\setMovesAndTimesToFile.js":"8","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\OldVersionPresent.jsx":"9","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\OldVersionContainer.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":3032,"mtime":1613069814036,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":7199,"mtime":1610978980924,"results":"15","hashOfConfig":"12"},{"size":1496,"mtime":1610745655770,"results":"16","hashOfConfig":"12"},{"size":625,"mtime":1610716003972,"results":"17","hashOfConfig":"12"},{"size":616,"mtime":1610743227035,"results":"18","hashOfConfig":"12"},{"size":1838,"mtime":1613072197126,"results":"19","hashOfConfig":"12"},{"size":1493,"mtime":1612900189362,"results":"20","hashOfConfig":"12"},{"size":5583,"mtime":1614007767821,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1o1k3pk",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\index.js",[],["46","47"],"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\App.js",[],"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\reportWebVitals.js",[],"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\SceneContainer.jsx",["48","49","50","51","52","53","54","55","56","57","58","59"],"import React from 'react';\r\nimport { Vector3, HemisphericLight, ArcRotateCamera, Tools } from '@babylonjs/core';\r\nimport SceneComponent from './ScenePresent'\r\nimport createDefaultGUIText from '../helpers/createDefaultGUIText'\r\nimport setMovesAndTimesToFile from '../helpers/setMovesAndTimesToFile'\r\nimport loadMesh from '../helpers/loadMesh'\r\n\r\nlet trick_delay = 500\r\nlet reactionTime = 0\r\n\r\nlet basket_position = 0\r\nlet n_trial = -1\r\nlet in_trial_time = 0\r\n\r\nlet trial_status = \"stop\"\r\n\r\nlet box = null, bomb = null, basket = null, apple = null, banana = null, cheese = null, hamburger = null, orange = null, pizza = null\r\nconst fruits = {}\r\n\r\nlet textblock = null\r\n\r\nlet movesPush = [], timesPush = []\r\n\r\nconst MainComponent = ({trial_position_sequence, trial_delay_sequence, trial_tricks_sequence}) => {\r\n    \r\nconst onSceneReady = async (scene, engine) => {\r\n        engine.displayLoadingUI()\r\n        let camera = new ArcRotateCamera(\"camera\", Tools.ToRadians(90), Tools.ToRadians(30), 10, Vector3.Zero(), scene)\r\n        camera.setTarget(Vector3.Zero())\r\n\r\n        let light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene)\r\n        light.intensity = 0.5\r\n        \r\n        apple = await loadMesh('', 'Apple.babylon', 0, 0, 0)\r\n        fruits.apple = apple\r\n        box = apple\r\n        bomb = await loadMesh('Bomb', 'Bomb.babylon', 0, 0, 0)\r\n        bomb.setEnabled(false)\r\n        banana = await loadMesh('Banana', 'Banana.babylon', 0, 0, 0)\r\n        banana.setEnabled(false)\r\n        fruits.banana = banana\r\n        cheese = await loadMesh('Cheese', 'Cheese.babylon', 0, 0, 0)\r\n        cheese.setEnabled(false)\r\n        fruits.cheese = cheese\r\n        hamburger = await loadMesh('Hamburger', 'Hamburger.babylon', 0, 0, 0)\r\n        hamburger.setEnabled(false)\r\n        fruits.hamburger = hamburger\r\n        orange = await loadMesh('Orange', 'Orange.babylon', 0, 0, 0)\r\n        orange.setEnabled(false)\r\n        fruits.orange = orange\r\n        pizza = await loadMesh('PizzaSlice', 'PizzaSlice.babylon', 0, 0, 0)\r\n        pizza.setEnabled(false)\r\n        fruits.pizza = pizza\r\n        basket = await loadMesh('Rattan_Case', 'Rattan_Case.babylon', 0, 0, 3.5)\r\n        basket.rotation = new Vector3(-Math.PI/3, 0, 0)\r\n\r\n        textblock = createDefaultGUIText()\r\n        \r\n            window.addEventListener(\"keydown\", evt => {\r\n                if (trial_status == \"in_trial_listening\") {\r\n                    if ((evt.keyCode == 65) | (evt.keyCode == 37)) {\r\n                        basket_position = 1\r\n                        basket.position.x = 2\r\n                        trial_status = \"in_trial_received\"\r\n                        reactionTime = in_trial_time - trial_delay_sequence[n_trial]\r\n                    } else if ((evt.keyCode == 68) | (evt.keyCode == 39)) {\r\n                        basket_position = -1\r\n                        basket.position.x = -2\r\n                        trial_status = \"in_trial_received\"\r\n                        reactionTime = in_trial_time - trial_delay_sequence[n_trial]\r\n                    } else {\r\n                        return\r\n                    }\r\n                }\r\n    \r\n                if (evt.keyCode == 32) {\r\n                    textblock.text = ''\r\n                    trial_status = 'reset'\r\n                    n_trial = -1\r\n                    in_trial_time = 0\r\n                    basket.position.x = 0\r\n                    basket_position = 0\r\n                    reactionTime = 0\r\n                }\r\n            }\r\n            )\r\n            engine.hideLoadingUI()  \r\n}\r\n\r\nlet speed = 15. / 1000\r\nlet on_screen_time = 1000\r\n\r\nlet rand = null\r\n\r\nconst onRender = (scene) => {\r\n    \r\n    if (trial_status != 'stop'){\r\n        //Random for fruits\r\n        if(rand > 0 && rand < 0.2){\r\n            box.setEnabled(false)\r\n            fruits.pizza.position = box.position\r\n            box = fruits.pizza\r\n            box.setEnabled(true)\r\n        } else if(rand > 0.2 && rand < 0.4){\r\n            box.setEnabled(false)\r\n            fruits.orange.position = box.position\r\n            box = fruits.orange\r\n            box.setEnabled(true)\r\n        } else if(rand > 0.4 && rand < 0.6){\r\n            box.setEnabled(false)\r\n            fruits.hamburger.position = box.position\r\n            box = fruits.hamburger\r\n            box.setEnabled(true)\r\n        } else if(rand > 0.6 && rand < 0.8){\r\n            box.setEnabled(false)\r\n            fruits.cheese.position = box.position\r\n            box = fruits.cheese\r\n            box.setEnabled(true)\r\n        } else {\r\n            box.setEnabled(false)\r\n            fruits.apple.position = box.position\r\n            box = fruits.apple\r\n            box.setEnabled(true)\r\n        }\r\n        //End of random\r\n        let dt = scene.getEngine().getDeltaTime()\r\n\r\n        box.position.z += speed * dt;\r\n        in_trial_time += dt;\r\n        if (in_trial_time > on_screen_time + trial_delay_sequence[n_trial]) {\r\n            trial_status = 'trial_end'\r\n        }\r\n\r\n        if (trial_status == \"in_trial_not_listening\") {\r\n            if (in_trial_time > trial_delay_sequence[n_trial]) {\r\n                trial_status = 'in_trial_listening'\r\n            }\r\n        }\r\n\r\n        if (trial_tricks_sequence[n_trial]) {\r\n            if (in_trial_time > trick_delay + trial_delay_sequence[n_trial]) {\r\n                box.setEnabled(false)\r\n                bomb.setEnabled(true)\r\n                bomb.position = box.position\r\n            }\r\n        } else {\r\n            box.setEnabled(true)\r\n            bomb.setEnabled(false)\r\n        }\r\n    }\r\n    \r\n    if (trial_status == 'trial_end') {\r\n        if (trial_tricks_sequence[n_trial]) {\r\n            if (basket_position == 0) {\r\n                textblock.text = `good`\r\n                console.log('good')\r\n            } else {\r\n                textblock.text = `bad`\r\n                console.log('bad')\r\n            }\r\n        } else {\r\n            if (basket_position == trial_position_sequence[n_trial]) {\r\n                textblock.text = `good`\r\n                console.log('good')\r\n            } else {\r\n                textblock.text = `bad`\r\n                console.log('bad')\r\n            }\r\n        }\r\n        movesPush.push(basket.position.x)\r\n        timesPush.push(reactionTime.toFixed(3))\r\n        trial_status = 'reset'\r\n        \r\n    }\r\n    if (trial_status == 'reset') {\r\n        basket.position.x = 0\r\n        basket_position = 0\r\n\r\n        reactionTime = 0\r\n        in_trial_time = 0\r\n        \r\n        trial_status = 'in_trial_not_listening'\r\n        n_trial += 1\r\n        if (n_trial >= trial_delay_sequence.length) {\r\n            trial_status = 'stop'\r\n            textblock.text = 'All done!'\r\n            setMovesAndTimesToFile(movesPush, timesPush)\r\n            movesPush = []\r\n            timesPush = []\r\n        }\r\n        box.position.z = 3 - speed * (on_screen_time + trial_delay_sequence[n_trial])\r\n        box.position.x = 2 * trial_position_sequence[n_trial]\r\n        rand = Math.random()\r\n    }\r\n}\r\n    return <>\r\n            <div>\r\n                <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id='my-canvas' />\r\n            </div>\r\n    </>\r\n\r\n}\r\n\r\nexport default MainComponent","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\ScenePresent.jsx",["60","61"],"import { Engine, Scene } from '@babylonjs/core'\r\nimport React, { useEffect, useRef } from 'react'\r\nexport default (props) => {\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n    \r\n    useEffect(() => {\r\n        if (reactCanvas.current) {\r\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\r\n            const scene = new Scene(engine, sceneOptions);\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene, engine)\r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n            const resize = () => {\r\n                scene.getEngine().resize();\r\n            }\r\n            if (window) {\r\n                window.addEventListener('resize', resize);\r\n            }\r\n            return () => {\r\n                scene.getEngine().dispose();\r\n                if (window) {\r\n                    window.removeEventListener('resize', resize);\r\n                }\r\n            }\r\n        }\r\n    }, [reactCanvas])\r\n    return (\r\n        <canvas ref={reactCanvas} {...rest} style ={{position:'absolute', width:'100%', height:'100%'}}/>\r\n    );\r\n}","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\helpers\\createDefaultGUIText.js",[],"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\helpers\\loadMesh.js",[],"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\helpers\\setMovesAndTimesToFile.js",[],"D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\OldVersionPresent.jsx",["62","63"],"import { Engine, Scene } from '@babylonjs/core'\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\nexport default (props) => {\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n    useEffect(() => {\r\n        if (reactCanvas.current) {\r\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\r\n            const scene = new Scene(engine, sceneOptions);\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene, engine)\r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n            const resize = () => {\r\n                scene.getEngine().resize();\r\n            }\r\n            if (window) {\r\n                window.addEventListener('resize', resize);\r\n            }\r\n            return () => {\r\n                scene.getEngine().dispose();\r\n                if (window) {\r\n                    window.removeEventListener('resize', resize);\r\n                }\r\n            }\r\n        }\r\n    }, [reactCanvas])\r\n    return (\r\n        <canvas ref={reactCanvas} {...rest} style = {{position:'absolute', width:'100%', height:'100%'}}/>\r\n    );\r\n}","D:\\Frontend Projects\\DefaultTomograph\\defaulttomograph\\src\\Components\\OldVersionContainer.jsx",["64","65","66","67","68","69","70","71","72","73","74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":60,"column":34,"nodeType":"82","messageId":"83","endLine":60,"endColumn":36},{"ruleId":"80","severity":1,"message":"81","line":61,"column":38,"nodeType":"82","messageId":"83","endLine":61,"endColumn":40},{"ruleId":"80","severity":1,"message":"81","line":61,"column":60,"nodeType":"82","messageId":"83","endLine":61,"endColumn":62},{"ruleId":"80","severity":1,"message":"81","line":66,"column":45,"nodeType":"82","messageId":"83","endLine":66,"endColumn":47},{"ruleId":"80","severity":1,"message":"81","line":66,"column":67,"nodeType":"82","messageId":"83","endLine":66,"endColumn":69},{"ruleId":"80","severity":1,"message":"81","line":76,"column":33,"nodeType":"82","messageId":"83","endLine":76,"endColumn":35},{"ruleId":"80","severity":1,"message":"84","line":97,"column":22,"nodeType":"82","messageId":"83","endLine":97,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":134,"column":26,"nodeType":"82","messageId":"83","endLine":134,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":152,"column":22,"nodeType":"82","messageId":"83","endLine":152,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":154,"column":33,"nodeType":"82","messageId":"83","endLine":154,"endColumn":35},{"ruleId":"80","severity":1,"message":"81","line":162,"column":33,"nodeType":"82","messageId":"83","endLine":162,"endColumn":35},{"ruleId":"80","severity":1,"message":"81","line":175,"column":22,"nodeType":"82","messageId":"83","endLine":175,"endColumn":24},{"ruleId":"85","severity":1,"message":"86","line":3,"column":1,"nodeType":"87","endLine":39,"endColumn":2},{"ruleId":"88","severity":1,"message":"89","line":35,"column":8,"nodeType":"90","endLine":35,"endColumn":21,"suggestions":"91"},{"ruleId":"85","severity":1,"message":"86","line":4,"column":1,"nodeType":"87","endLine":39,"endColumn":2},{"ruleId":"88","severity":1,"message":"89","line":35,"column":8,"nodeType":"90","endLine":35,"endColumn":21,"suggestions":"92"},{"ruleId":"80","severity":1,"message":"81","line":43,"column":22,"nodeType":"82","messageId":"83","endLine":43,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":44,"column":26,"nodeType":"82","messageId":"83","endLine":44,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":44,"column":48,"nodeType":"82","messageId":"83","endLine":44,"endColumn":50},{"ruleId":"80","severity":1,"message":"81","line":55,"column":33,"nodeType":"82","messageId":"83","endLine":55,"endColumn":35},{"ruleId":"80","severity":1,"message":"81","line":55,"column":55,"nodeType":"82","messageId":"83","endLine":55,"endColumn":57},{"ruleId":"80","severity":1,"message":"81","line":71,"column":21,"nodeType":"82","messageId":"83","endLine":71,"endColumn":23},{"ruleId":"80","severity":1,"message":"84","line":87,"column":20,"nodeType":"82","messageId":"83","endLine":87,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":96,"column":22,"nodeType":"82","messageId":"83","endLine":96,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":118,"column":18,"nodeType":"82","messageId":"83","endLine":118,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":120,"column":29,"nodeType":"82","messageId":"83","endLine":120,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":128,"column":29,"nodeType":"82","messageId":"83","endLine":128,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":139,"column":18,"nodeType":"82","messageId":"83","endLine":139,"endColumn":20},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'adaptToDeviceRatio', 'antialias', 'engineOptions', 'onRender', 'props', and 'sceneOptions'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["95"],["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},"Update the dependencies array to be: [adaptToDeviceRatio, antialias, engineOptions, onRender, props, reactCanvas, sceneOptions]",{"range":"100","text":"101"},{"range":"102","text":"101"},[1350,1363],"[adaptToDeviceRatio, antialias, engineOptions, onRender, props, reactCanvas, sceneOptions]",[1346,1359]]